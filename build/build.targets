<Project>
  <Import Project="$(MSBuildThisFileDirectory)..\version.props"/>
  
  <ItemGroup>
    <NPMPackage Include="$(RepositoryRoot)clients/ts/signalr-pipe">
      <TarName>signalr-pipe</TarName>
      <PackageId>signalr-pipe</PackageId>
    </NPMPackage>
  </ItemGroup>

  <PropertyGroup>
    <RepositoryRoot>$(MSBuildThisFileDirectory)..\</RepositoryRoot>
    <PackageOutputPath>$(MSBuildThisFileDirectory)..\artifacts\packages</PackageOutputPath>
    <TestResultsPath>$(MSBuildThisFileDirectory)..\artifacts\test-results</TestResultsPath>
  </PropertyGroup>

  <Target Name="RestoreNpm">
    <PropertyGroup>
      <NpmInstallCommand>ci</NpmInstallCommand>
    </PropertyGroup>
    <Message Text="Restoring NPM modules" Importance="high" />
    <Exec Command="npm $(NpmInstallCommand)" WorkingDirectory="$(RepositoryRoot)clients/ts/common" />
    <Exec Command="npm $(NpmInstallCommand)" WorkingDirectory="$(RepositoryRoot)clients/ts/functional-tests" />
    <Exec Command="npm $(NpmInstallCommand)" WorkingDirectory="$(RepositoryRoot)clients/ts/signalr-pipe" />
  </Target>

  <Target Name="GetNpmArtifactInfo">
    <ItemGroup>
      <NPMPackage Update="%(NPMPackage)">
        <PackageJson>$([System.IO.Path]::Combine(%(NPMPackage.FullPath), 'package.json'))</PackageJson>
        <OutputTar>$([System.IO.Path]::Combine(%(NPMPackage.FullPath), '%(NPMPackage.TarName)-$(PackageVersion).tgz'))</OutputTar>
        <ArtifactPath>$([System.IO.Path]::Combine($(PackageOutputPath), '%(NPMPackage.TarName)-$(PackageVersion).tgz'))</ArtifactPath>
      </NPMPackage>

      <ArtifactInfo Include="%(NPMPackage.ArtifactPath)">
        <ArtifactType>NpmPackage</ArtifactType>
        <PackageId>%(NPMPackage.PackageId)</PackageId>
        <Version>$(PackageVersion)</Version>
      </ArtifactInfo>
    </ItemGroup>

    <ItemGroup>
      <FilesToExcludeFromSigning Include="%(NPMPackage.ArtifactPath);" />
    </ItemGroup>
  </Target>

  <Target Name="RunTSClientNodeTests">
    <Message Text="Running JavaScript client Node tests" Importance="high" />
    <Exec Command="npm run test" WorkingDirectory="$(RepositoryRoot)clients/ts" />
  </Target>

  <Target Name="BuildNPMPackages" DependsOnTargets="RestoreNpm;GetNpmArtifactInfo">
    <Message Text="Building %(NPMPackage.PackageId)..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="%(NPMPackage.FullPath)" />
  </Target>

  <Target Name="PackNPMPackages" DependsOnTargets="BuildNPMPackages">
    <Message Text="Packing %(NPMPackage.PackageId)..." Importance="high" />
    <Copy SourceFiles="%(NPMPackage.PackageJson)" DestinationFiles="%(NPMPackage.PackageJson).bak" />
    <Exec Command="npm --no-git-tag-version --allow-same-version version $(PackageVersion)" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Exec Command="npm pack" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Delete Files="%(NPMPackage.ArtifactPath)" Condition="Exists('%(NPMPackage.ArtifactPath)')" />
    <Move SourceFiles="%(NPMPackage.OutputTar)" DestinationFiles="%(NPMPackage.ArtifactPath)" />
    <Move SourceFiles="%(NPMPackage.PackageJson).bak" DestinationFiles="%(NPMPackage.PackageJson)" />
  </Target>

  <ItemGroup>
    <SolutionsInBuild Include="$(MSBuildThisFileDirectory)..\SignalR.Pipes.sln" />
  </ItemGroup>
  
  <Target Name="Test" DependsOnTargets="RunTSClientNodeTests">
    <Exec Command="dotnet test --no-build --logger trx;LogFileName=dotnet.tests.trx --results-directory $(TestResultsPath) @(SolutionsInBuild)" />
    <Exec Command="npm run test" WorkingDirectory="$(RepositoryRoot)clients/ts/functional-tests" />
  </Target>
  
  <Target Name="CI" DependsOnTargets="BuildNPMPackages;RunTSClientNodeTests;PackNPMPackages">
    <Exec Command="dotnet build -p:IsCI=true -p:BUILD_NUMBER=$(BUILD_NUMBER) @(SolutionsInBuild)" />
    <Exec Command="dotnet pack -p:IsCI=true -p:BUILD_NUMBER=$(BUILD_NUMBER) @(SolutionsInBuild)" />
  </Target>
</Project>